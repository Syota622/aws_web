name: ECS Build and Deploy

on:
  workflow_call:
    inputs:
      env_var:
        required: true
        type: string

env:
  AWS_REGION: ap-northeast-1

jobs:
  build-and-deploy:
    runs-on: ubuntu-22.04
    environment: 
      name: ${{ inputs.env_var }}
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout Code
        uses: actions/checkout@v4

      # AWS認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.PROJECT }}-github-actions-role
          role-session-name: ${{ secrets.PROJECT }}-github-actions

      # Amazon ECRにログイン
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # ARM64アーキテクチャのエミュレーションをセットアップ
      - name: Set up QEMU for arm64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Docker Buildxをセットアップ
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Dockerキャッシュをセットアップ
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache-ecs
          key: ${{ runner.os }}-buildx-ecs-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-ecs-

      # バックエンドのDockerイメージをビルド(type=local)
      - name: Build Backend Image
        run: |
          docker buildx create --use
          docker buildx build \
            --platform linux/arm64 \
            -t ${{ secrets.PROJECT }}-backend-private-repository-${{ inputs.env_var }}:${{ github.sha }} \
            -f backend/docker/${{ inputs.env_var }}/Dockerfile \
            --cache-from type=local,src=/tmp/.buildx-cache-ecs \
            --cache-to type=local,dest=/tmp/.buildx-cache-ecs-new,mode=max \
            --load \
            .

      # キャッシュを移動
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache-ecs
          mv /tmp/.buildx-cache-ecs-new /tmp/.buildx-cache-ecs

      # イメージにタグを付ける
      - name: Tag Backend Image
        run: |
          docker tag ${{ secrets.PROJECT }}-backend-private-repository-${{ inputs.env_var }}:${{ github.sha }} \
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ secrets.PROJECT }}-backend-private-repository-${{ inputs.env_var }}:${{ github.sha }}

      # バックエンドイメージをECRにプッシュ
      - name: Push Backend Image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ secrets.PROJECT }}-backend-private-repository-${{ inputs.env_var }}:${{ github.sha }}

      # タスク定義を更新(github.shaのイメージを使用)
      - name: Update ECS task definition
        run: |
          # タスク定義ファイルを読み込む
          TASK_DEFINITION=$(cat ${{ github.workspace }}/.github/workflows/ecs_task_definition/backend_task_definition.json)
          # 変数を置換
          TASK_DEFINITION=$(echo "$TASK_DEFINITION" | sed -e "s/AWS_ACCOUNT_ID/${{ secrets.AWS_ACCOUNT_ID }}/g" -e "s/PROJECT/${{ secrets.PROJECT }}/g" -e "s/ENVIRONMENT/${{ inputs.env_var }}/g")
          # イメージを更新
          NEW_TASK_DEFINITION=$(echo "$TASK_DEFINITION" | jq --arg IMAGE "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ secrets.PROJECT }}-backend-private-repository-${{ inputs.env_var }}:${{ github.sha }}" '
            .containerDefinitions[0].image = $IMAGE
          ')
          # 新しいタスク定義を登録
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "NEW_TASK_DEFINITION_ARN=$NEW_TASK_DEFINITION_ARN" >> "$GITHUB_ENV"

      # ECSにデプロイ
      - name: Deploy to ECS
        run: |
          export ECS_CLUSTER="${{ secrets.PROJECT }}-backend-ecs-cluster-${{ inputs.env_var }}"
          export ECS_SERVICE="${{ secrets.PROJECT }}-backend-ecs-service-${{ inputs.env_var }}"
          echo "ECS_CLUSTER: $ECS_CLUSTER"
          echo "ECS_SERVICE: $ECS_SERVICE"
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --task-definition $NEW_TASK_DEFINITION_ARN --force-new-deployment
