# ワークフロー名の定義
name: Backend Deploy with Lambda Migration

# ワークフローのトリガー設定
on: 
  push:
    branches: 
    - "develop"
    - "main"
    - "feature/**"
    paths:
      - '.github/workflows/backend_auto_deploy.yml'
      - 'backend/**'
      - 'db/migrations/**'
      - 'lambda/migrate/**'

# GitHub Actionsで利用するIAMロールの権限設定
permissions:
  id-token: write  # OIDCプロバイダーとの認証に必要
  contents: read   # リポジトリの内容を読み取るために必要

# 環境変数の設定
env:
  # ブランチに応じて環境変数を動的に設定
  # main -> prod, develop -> dev, feature/* -> prod, その他 -> ''
  ENV_VAR: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || startsWith(github.ref, 'refs/heads/feature/') && 'prod' || '' }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  PROJECT: ${{ secrets.PROJECT }}
  VPC_ID: ${{ secrets.VPC_ID }}
  PRIVATE_SUBNET_ID_C: ${{ secrets.PRIVATE_SUBNET_ID_C }}
  PRIVATE_SUBNET_ID_D: ${{ secrets.PRIVATE_SUBNET_ID_D }}
  AWS_REGION: ap-northeast-1

jobs:
  check-changes:
    uses: ./.github/workflows/check-changes.yml

  # Lambdaのデプロイとマイグレーションを実行するジョブ
  deploy-lambda-and-migrate:
    needs: check-changes
    if: needs.check-changes.outputs.lambda_changed == 'true'
    runs-on: ubuntu-22.04
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || startsWith(github.ref, 'refs/heads/feature/') && 'prod' || '' }}
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout Code
        uses: actions/checkout@v4

      # AWS認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT }}-github-actions-role
          role-session-name: ${{ env.PROJECT }}-github-actions

      # Amazon ECRにログイン
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Lambdaコンテナイメージをビルド
      - name: Build Lambda Container Image
        run: |
          docker build -t ${{ env.PROJECT }}-db-migration-lambda-${{ env.ENV_VAR }}:${{ github.sha }} -f backend/lambda/migrate/Dockerfile ./backend
          docker tag ${{ env.PROJECT }}-db-migration-lambda-${{ env.ENV_VAR }}:${{ github.sha }} \
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT }}-db-migration-lambda-${{ env.ENV_VAR }}:${{ github.sha }}

      # LambdaコンテナイメージをECRにプッシュ
      - name: Push Lambda Container Image to ECR
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT }}-db-migration-lambda-${{ env.ENV_VAR }}:${{ github.sha }}

      # Lambda関数を更新
      - name: Update Lambda Function
        run: |
          aws lambda update-function-code --function-name ${{ env.PROJECT }}-db-migration-lambda-${{ env.ENV_VAR }} \
            --image-uri ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT }}-db-migration-lambda-${{ env.ENV_VAR }}:${{ github.sha }}

      # セキュリティグループの作成
      - name: Create Security Group
        run: |
          echo "### SecurityGroupの作成 ###"
          SECURITY_GROUP_ID=$(aws ec2 create-security-group --group-name ${{ env.PROJECT }}-vpc-endpoint-migrate-sg-${{ env.ENV_VAR }} --description "Security group for VPC endpoint" --vpc-id ${{ env.VPC_ID }} --output text)
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 443 --cidr 0.0.0.0/0
          echo "SecurityGroup ID: $SECURITY_GROUP_ID"
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV
        continue-on-error: true
      
      # VPCエンドポイント作成(Logs&SecretsManager)
      - name: Create VPC Endpoint
        run: |
          echo "### VPCエンドポイントの作成 ###"
          echo "SecurityGroup ID: ${{ env.SECURITY_GROUP_ID }}"

          VPC_ENDPOINT_ID_LOGS=$(aws ec2 create-vpc-endpoint --vpc-id ${{ env.VPC_ID }} --service-name com.amazonaws.${{ env.AWS_REGION }}.logs \
            --vpc-endpoint-type Interface --security-group-ids ${{ env.SECURITY_GROUP_ID }} --subnet-ids ${{ env.PRIVATE_SUBNET_ID_C }} ${{ env.PRIVATE_SUBNET_ID_D }} --query 'VpcEndpoint.VpcEndpointId' --output text)
          VPC_ENDPOINT_ID_SECRETS_MANAGER=$(aws ec2 create-vpc-endpoint --vpc-id ${{ env.VPC_ID }} --service-name com.amazonaws.${{ env.AWS_REGION }}.secretsmanager \
            --vpc-endpoint-type Interface --security-group-ids ${{ env.SECURITY_GROUP_ID }} --subnet-ids ${{ env.PRIVATE_SUBNET_ID_C }} ${{ env.PRIVATE_SUBNET_ID_D }} --query 'VpcEndpoint.VpcEndpointId' --output text)
          echo "VPC_ENDPOINT_ID_LOGS=$VPC_ENDPOINT_ID_LOGS" >> $GITHUB_ENV
          echo "VPC_ENDPOINT_ID_SECRETS_MANAGER=$VPC_ENDPOINT_ID_SECRETS_MANAGER" >> $GITHUB_ENV
        continue-on-error: true

      # VPCエンドポイントのステータス確認
      - name: Check VPC Endpoint Status
        run: |
          echo "VPCエンドポイントのステータスを確認中..."
          while true; do
            LOGS_ENDPOINT_STATUS=$(aws ec2 describe-vpc-endpoints --vpc-endpoint-ids ${{ env.VPC_ENDPOINT_ID_LOGS }} \
              --query 'VpcEndpoints[0].State' --output text)
            SECRETS_MANAGER_ENDPOINT_STATUS=$(aws ec2 describe-vpc-endpoints --vpc-endpoint-ids ${{ env.VPC_ENDPOINT_ID_SECRETS_MANAGER }} \
              --query 'VpcEndpoints[0].State' --output text)

            echo "Logs Endpoint Status: $LOGS_ENDPOINT_STATUS"
            echo "Secrets Manager Endpoint Status: $SECRETS_MANAGER_ENDPOINT_STATUS"

            if [ "$LOGS_ENDPOINT_STATUS" = "available" ] && [ "$SECRETS_MANAGER_ENDPOINT_STATUS" = "available" ]; then
              echo "両方のVPCエンドポイントが利用可能になりました。"
              break
            else
              echo "VPCエンドポイントがまだ利用可能ではありません。10秒後に再確認します。"
              sleep 10
            fi
          done

      # データベースマイグレーションを実行
      - name: Run Database Migration
        run: |
          aws lambda invoke --function-name ${{ env.PROJECT }}-db-migration-lambda-${{ env.ENV_VAR }} --payload '{}' response.json
          cat response.json
        continue-on-error: true

      # VPCエンドポイント削除
      - name: Delete VPC Endpoints
        run: |
          echo "### VPCエンドポイントの削除 ###"
          echo "Deleting VPC Endpoint for Logs: ${{ env.VPC_ENDPOINT_ID_LOGS }}"
          aws ec2 delete-vpc-endpoints --vpc-endpoint-ids ${{ env.VPC_ENDPOINT_ID_LOGS }} || true
          echo "Deleting VPC Endpoint for Secrets Manager: ${{ env.VPC_ENDPOINT_ID_SECRETS_MANAGER }}"
          aws ec2 delete-vpc-endpoints --vpc-endpoint-ids ${{ env.VPC_ENDPOINT_ID_SECRETS_MANAGER }} || true

      # VPCエンドポイントの削除確認
      - name: Confirm VPC Endpoints Deletion
        run: |
          echo "VPCエンドポイントの削除状況を確認中..."
          while true; do
            LOGS_ENDPOINT_EXISTS=$(aws ec2 describe-vpc-endpoints --vpc-endpoint-ids ${{ env.VPC_ENDPOINT_ID_LOGS }} 2>&1 | grep -c "InvalidVpcEndpointId.NotFound" || true)
            SECRETS_MANAGER_ENDPOINT_EXISTS=$(aws ec2 describe-vpc-endpoints --vpc-endpoint-ids ${{ env.VPC_ENDPOINT_ID_SECRETS_MANAGER }} 2>&1 | grep -c "InvalidVpcEndpointId.NotFound" || true)
            
            echo "Logs Endpoint Deleted: $LOGS_ENDPOINT_EXISTS"
            echo "Secrets Manager Endpoint Deleted: $SECRETS_MANAGER_ENDPOINT_EXISTS"
            
            if [ "$LOGS_ENDPOINT_EXISTS" -eq 1 ] && [ "$SECRETS_MANAGER_ENDPOINT_EXISTS" -eq 1 ]; then
              echo "両方のVPCエンドポイントが正常に削除されました。"
              break
            else
              echo "VPCエンドポイントの削除がまだ完了していません。10秒後に再確認します。"
              sleep 10
            fi
          done

      # セキュリティグループ削除
      - name: Delete Security Group
        run: |
          echo "### セキュリティグループの削除 ###"
          echo "SecurityGroup ID: ${{ env.SECURITY_GROUP_ID }}"
          aws ec2 delete-security-group --group-id ${{ env.SECURITY_GROUP_ID }}

  # ECS(バックエンド)のビルドとデプロイを行うジョブ
  build-and-deploy:
    needs: [check-changes, deploy-lambda-and-migrate]
    if: needs.check-changes.outputs.backend_changed == 'true'
    runs-on: ubuntu-22.04
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'prod' || github.ref == 'refs/heads/develop' && 'dev' || startsWith(github.ref, 'refs/heads/feature/') && 'prod' || '' }}
    steps:
      # リポジトリのコードをチェックアウト
      - name: Checkout Code
        uses: actions/checkout@v4

      # 環境変数の確認
      - name: env Confirmation
        run: |
          echo "ENV_VAR: ${{ env.ENV_VAR }}"
          echo "AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}"
          echo "PROJECT: ${{ env.PROJECT }}"
          echo "AWS_REGION: ${{ env.AWS_REGION }}"

      # ARM64アーキテクチャのエミュレーションをセットアップ
      - name: Set up QEMU for arm64
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      # Docker Buildxをセットアップ
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # バックエンドのDockerイメージをビルド
      - name: Build Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/docker/${{ env.ENV_VAR }}/Dockerfile 
          platforms: linux/arm64
          tags: ${{ env.PROJECT }}_image:latest
          outputs: type=docker,dest=/tmp/${{ env.PROJECT }}_image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # AWS認証情報を設定
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT }}-github-actions-role
          role-session-name: ${{ env.PROJECT }}-github-actions

      # Amazon ECRにログイン
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # ビルドしたバックエンドイメージをECRにプッシュ
      - name: Push Backend Image to ECR
        run: |
          docker load --input /tmp/${{ env.PROJECT }}_image.tar
          docker tag ${{ env.PROJECT }}_image:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT }}-private-repository-${{ env.ENV_VAR }}:latest
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.PROJECT }}-private-repository-${{ env.ENV_VAR }}:latest

      # ECSにデプロイ
      - name: Deploy to ECS
        run: |
          export ECS_CLUSTER="${{ env.PROJECT }}-ecs-cluster-${{ env.ENV_VAR }}"
          export ECS_SERVICE="${{ env.PROJECT }}-ecs-service-${{ env.ENV_VAR }}"
          echo "ECS_CLUSTER: $ECS_CLUSTER"
          echo "ECS_SERVICE: $ECS_SERVICE"
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
