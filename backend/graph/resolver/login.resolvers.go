package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"golang/auth"
	"golang/graph/generated"
	"golang/graph/model"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginPayload, error) {
	// Cognitoに認証リクエストを送信
	authInput := &cognitoidentityprovider.InitiateAuthInput{
		AuthFlow: types.AuthFlowTypeUserPasswordAuth,
		ClientId: aws.String(auth.CognitoClientID),
		AuthParameters: map[string]string{
			"USERNAME": input.Username,
			"PASSWORD": input.Password,
		},
	}

	authOutput, err := auth.CognitoClient.InitiateAuth(ctx, authInput)
	if err != nil {
		return &model.LoginPayload{
			Error: aws.String("認証に失敗しました"),
		}, nil
	}

	// 認証成功時、ユーザー情報を取得
	userInput := &cognitoidentityprovider.GetUserInput{
		AccessToken: authOutput.AuthenticationResult.AccessToken,
	}

	userOutput, err := auth.CognitoClient.GetUser(ctx, userInput)
	if err != nil {
		return &model.LoginPayload{
			Error: aws.String("ユーザー情報の取得に失敗しました"),
		}, nil
	}

	// ユーザー情報からIDとメールアドレスを抽出
	var userID, email string
	for _, attr := range userOutput.UserAttributes {
		switch *attr.Name {
		case "sub":
			userID = *attr.Value
		case "email":
			email = *attr.Value
		}
	}

	return &model.LoginPayload{
		Token: authOutput.AuthenticationResult.IdToken,
		User: &model.User{
			ID:       userID,
			Username: *userOutput.Username,
			Email:    &email,
		},
	}, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
