package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"errors"
	"fmt"
	"golang/graph/generated"
	"golang/graph/model"
	"golang/models"
	"log"

	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.LoginInput) (*model.LoginPayload, error) {
	if r.DB == nil {
		log.Println("データベース接続が初期化されていません")
		return nil, fmt.Errorf("データベース接続が初期化されていません")
	}

	// バリデーション
	var user models.User
	if err := r.DB.Where("email = ?", input.Email).First(&user).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return &model.LoginPayload{
				Errors: []*model.Error{{Field: "email", Message: "メールアドレスまたはパスワードが正しくありません"}},
			}, nil
		}
		return nil, fmt.Errorf("ユーザー情報の取得に失敗しました: %v", err)
	}

	if err := bcrypt.CompareHashAndPassword([]byte(user.Password), []byte(input.Password)); err != nil {
		log.Printf("Password mismatch for user: %s", input.Email)
		return &model.LoginPayload{
			Errors: []*model.Error{{Field: "password", Message: "メールアドレスまたはパスワードが正しくありません"}},
		}, nil
	}

	// JWTトークンを生成
	token := "generated_jwt_token"

	log.Printf("ログイン成功: %s", input.Email)
	return &model.LoginPayload{
		Token: &token,
		User: &model.User{
			ID:        user.ID, // IDフィールドを追加
			Username:  user.Username,
			Email:     user.Email,
			CreatedAt: user.CreatedAt.Format("2006-01-02T15:04:05Z07:00"),
			UpdatedAt: user.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"),
		},
	}, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
